<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/components/vehicles/addEdit/vehicle-form.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/components/vehicles/addEdit/vehicle-form.tsx" />
              <option name="originalContent" value="import { useState, useEffect } from &quot;react&quot;&#10;import { useForm } from &quot;react-hook-form&quot;&#10;import { zodResolver } from &quot;@hookform/resolvers/zod&quot;&#10;import { Button } from &quot;~/components/ui/button&quot;&#10;import { Card, CardContent, CardDescription, CardHeader, CardTitle } from &quot;~/components/ui/card&quot;&#10;import { Input } from &quot;~/components/ui/input&quot;&#10;import { Label } from &quot;~/components/ui/label&quot;&#10;import { Textarea } from &quot;~/components/ui/textarea&quot;&#10;import { Checkbox } from &quot;~/components/ui/checkbox&quot;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;~/components/ui/select&quot;&#10;import { Separator } from &quot;~/components/ui/separator&quot;&#10;import { vehicleFormSchema, defaultVehicleValues, type VehicleFormData } from &quot;./schema&quot;&#10;import { makesApiService } from &quot;~/components/makes/makes-api&quot;&#10;import { modelsApiService } from &quot;~/components/models/models-api&quot;&#10;import { vehicleTypesApiService } from &quot;~/components/vehicle-types/vehicle-types-api&quot;&#10;import { fuelTypesApiService } from &quot;~/components/fuel-types/fuel-types-api&quot;&#10;import { transmissionsApiService } from &quot;~/components/transmissions/transmissions-api&quot;&#10;import { driveTypesApiService } from &quot;~/components/drive-types/drive-types-api&quot;&#10;import type { Make } from &quot;~/types/make&quot;&#10;import type { Model } from &quot;~/types/model&quot;&#10;import type { VehicleType } from &quot;~/types/vehicle-type&quot;&#10;import type { FuelType } from &quot;~/types/fuel-type&quot;&#10;import type { Transmission } from &quot;~/types/transmission&quot;&#10;import type { DriveType } from &quot;~/types/drive-type&quot;&#10;&#10;type VehicleFormProps = {&#10;  initialData?: Partial&lt;VehicleFormData&gt;&#10;  onSubmit: (data: VehicleFormData) =&gt; void&#10;  isLoading?: boolean&#10;  mode: &quot;add&quot; | &quot;edit&quot;&#10;}&#10;&#10;export function VehicleForm({ initialData, onSubmit, isLoading = false, mode }: VehicleFormProps) {&#10;  const [customMake, setCustomMake] = useState(&quot;&quot;)&#10;  const [customModel, setCustomModel] = useState(&quot;&quot;)&#10;&#10;  // API Data State&#10;  const [makes, setMakes] = useState&lt;Make[]&gt;([])&#10;  const [models, setModels] = useState&lt;Model[]&gt;([])&#10;  const [vehicleTypes, setVehicleTypes] = useState&lt;VehicleType[]&gt;([])&#10;  const [fuelTypes, setFuelTypes] = useState&lt;FuelType[]&gt;([])&#10;  const [transmissions, setTransmissions] = useState&lt;Transmission[]&gt;([])&#10;  const [driveTypes, setDriveTypes] = useState&lt;DriveType[]&gt;([])&#10;  const [loadingMakes, setLoadingMakes] = useState(true)&#10;  const [loadingModels, setLoadingModels] = useState(false)&#10;  const [loadingVehicleTypes, setLoadingVehicleTypes] = useState(true)&#10;  const [loadingFuelTypes, setLoadingFuelTypes] = useState(true)&#10;  const [loadingTransmissions, setLoadingTransmissions] = useState(true)&#10;  const [loadingDriveTypes, setLoadingDriveTypes] = useState(true)&#10;&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    setValue,&#10;    watch,&#10;    formState: { errors },&#10;  } = useForm&lt;VehicleFormData&gt;({&#10;    resolver: zodResolver(vehicleFormSchema),&#10;    defaultValues: {&#10;      ...defaultVehicleValues,&#10;      ...initialData,&#10;    },&#10;  })&#10;&#10;  // Watch the selected make to update available models&#10;  const selectedMake = watch(&quot;make&quot;)&#10;  const selectedModel = watch(&quot;model&quot;)&#10;&#10;  const currentYear = new Date().getFullYear()&#10;  const years = Array.from({ length: currentYear - 1990 + 1 }, (_, i) =&gt; currentYear - i)&#10;&#10;  // Fetch Makes&#10;  useEffect(() =&gt; {&#10;    const fetchMakes = async () =&gt; {&#10;      try {&#10;        setLoadingMakes(true)&#10;        const response = await makesApiService.getAllWithFilters({&#10;          active: true,&#10;          sortBy: 'name',&#10;          sortOrder: 'asc',&#10;          limit: 1000&#10;        })&#10;        setMakes(response.data || [])&#10;      } catch (error) {&#10;        console.error('Error fetching makes:', error)&#10;      } finally {&#10;        setLoadingMakes(false)&#10;      }&#10;    }&#10;&#10;    fetchMakes()&#10;  }, [])&#10;&#10;  // Fetch Vehicle Types&#10;  useEffect(() =&gt; {&#10;    const fetchVehicleTypes = async () =&gt; {&#10;      try {&#10;        setLoadingVehicleTypes(true)&#10;        const response = await vehicleTypesApiService.getAllWithFilters({&#10;          active: true,&#10;          sortBy: 'name',&#10;          sortOrder: 'asc',&#10;          limit: 1000&#10;        })&#10;        setVehicleTypes(response.data || [])&#10;      } catch (error) {&#10;        console.error('Error fetching vehicle types:', error)&#10;      } finally {&#10;        setLoadingVehicleTypes(false)&#10;      }&#10;    }&#10;&#10;    fetchVehicleTypes()&#10;  }, [])&#10;&#10;  // Fetch Fuel Types using dropdown endpoint&#10;  useEffect(() =&gt; {&#10;    const fetchFuelTypes = async () =&gt; {&#10;      try {&#10;        setLoadingFuelTypes(true)&#10;        const response = await fuelTypesApiService.getForDropdown()&#10;        setFuelTypes(response.data || [])&#10;      } catch (error) {&#10;        console.error('Error fetching fuel types:', error)&#10;      } finally {&#10;        setLoadingFuelTypes(false)&#10;      }&#10;    }&#10;&#10;    fetchFuelTypes()&#10;  }, [])&#10;&#10;  // Fetch Transmissions using dropdown endpoint&#10;  useEffect(() =&gt; {&#10;    const fetchTransmissions = async () =&gt; {&#10;      try {&#10;        setLoadingTransmissions(true)&#10;        const response = await transmissionsApiService.getDropdownItems()&#10;        setTransmissions(response.data || [])&#10;      } catch (error) {&#10;        console.error('Error fetching transmissions:', error)&#10;      } finally {&#10;        setLoadingTransmissions(false)&#10;      }&#10;    }&#10;&#10;    fetchTransmissions()&#10;  }, [])&#10;&#10;  // Fetch Drive Types using dropdown endpoint&#10;  useEffect(() =&gt; {&#10;    const fetchDriveTypes = async () =&gt; {&#10;      try {&#10;        setLoadingDriveTypes(true)&#10;        const response = await driveTypesApiService.getActiveForDropdown()&#10;        setDriveTypes(response.data || [])&#10;      } catch (error) {&#10;        console.error('Error fetching drive types:', error)&#10;      } finally {&#10;        setLoadingDriveTypes(false)&#10;      }&#10;    }&#10;&#10;    fetchDriveTypes()&#10;  }, [])&#10;&#10;  // Fetch Models when make changes&#10;  useEffect(() =&gt; {&#10;    const fetchModels = async () =&gt; {&#10;      if (!selectedMake || selectedMake === &quot;Other&quot;) {&#10;        setModels([])&#10;        return&#10;      }&#10;&#10;      try {&#10;        setLoadingModels(true)&#10;        console.log('Fetching models for make:', selectedMake)&#10;        console.log('Available makes:', makes)&#10;&#10;        // Find the make ID - check both id and _id fields&#10;        const selectedMakeObj = makes.find(make =&gt;&#10;          make.name === selectedMake ||&#10;          make.name?.toLowerCase() === selectedMake.toLowerCase()&#10;        )&#10;&#10;        console.log('Selected make object:', selectedMakeObj)&#10;&#10;        if (!selectedMakeObj) {&#10;          console.warn('Make not found in API data, skipping model fetch')&#10;          setModels([])&#10;          return&#10;        }&#10;&#10;        // Use _id if available, fallback to id&#10;        const makeId = selectedMakeObj._id || selectedMakeObj.id&#10;&#10;        console.log('Using make ID:', makeId)&#10;&#10;        const response = await modelsApiService.getAllWithFilters({&#10;          make: makeId,&#10;          active: true,&#10;          sortBy: 'name',&#10;          sortOrder: 'asc',&#10;          limit: 1000&#10;        })&#10;&#10;        console.log('Models API response:', response)&#10;        setModels(response.data?.models || response.data || [])&#10;      } catch (error) {&#10;        console.error('Error fetching models:', error)&#10;        setModels([])&#10;      } finally {&#10;        setLoadingModels(false)&#10;      }&#10;    }&#10;&#10;    // Only fetch models if we have makes data and a selected make&#10;    if (makes.length &gt; 0 &amp;&amp; selectedMake &amp;&amp; selectedMake !== &quot;Other&quot;) {&#10;      fetchModels()&#10;    } else if (!selectedMake || selectedMake === &quot;Other&quot;) {&#10;      setModels([])&#10;    }&#10;  }, [selectedMake, makes])&#10;&#10;  // Popular Vehicle Makes Fallback (keep as fallback for when API fails)&#10;  const fallbackMakes = [&#10;    &quot;Acura&quot;, &quot;Audi&quot;, &quot;BMW&quot;, &quot;Buick&quot;, &quot;Cadillac&quot;, &quot;Chevrolet&quot;, &quot;Chrysler&quot;, &quot;Dodge&quot;,&#10;    &quot;Ford&quot;, &quot;Genesis&quot;, &quot;GMC&quot;, &quot;Honda&quot;, &quot;Hyundai&quot;, &quot;Infiniti&quot;, &quot;Jaguar&quot;, &quot;Jeep&quot;,&#10;    &quot;Kia&quot;, &quot;Land Rover&quot;, &quot;Lexus&quot;, &quot;Lincoln&quot;, &quot;Mazda&quot;, &quot;Mercedes-Benz&quot;, &quot;MINI&quot;,&#10;    &quot;Mitsubishi&quot;, &quot;Nissan&quot;, &quot;Porsche&quot;, &quot;Ram&quot;, &quot;Subaru&quot;, &quot;Tesla&quot;, &quot;Toyota&quot;,&#10;    &quot;Volkswagen&quot;, &quot;Volvo&quot;, &quot;Other&quot;&#10;  ]&#10;&#10;  // Get display data for dropdowns&#10;  const displayMakes = makes.length &gt; 0 ? makes : fallbackMakes.map(name =&gt; ({ id: name, name, active: true }))&#10;&#10;  return (&#10;    &lt;form onSubmit={handleSubmit(onSubmit)} className=&quot;space-y-6&quot;&gt;&#10;      {/* Basic Vehicle Information */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Basic Vehicle Information&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Enter the core details about the vehicle&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;make&quot;&gt;Make *&lt;/Label&gt;&#10;              &lt;Select&#10;                onValueChange={(value) =&gt; {&#10;                  setValue(&quot;make&quot;, value)&#10;                  setValue(&quot;model&quot;, &quot;&quot;) // Reset model when make changes&#10;                }}&#10;                defaultValue={initialData?.make}&#10;              &gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select make&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {loadingMakes ? (&#10;                    &lt;SelectItem value=&quot;loading&quot; disabled&gt;Loading makes...&lt;/SelectItem&gt;&#10;                  ) : (&#10;                    &lt;&gt;&#10;                      {displayMakes.map((make) =&gt; (&#10;                        &lt;SelectItem key={make.id || make.name} value={make.name}&gt;&#10;                          {make.name}&#10;                        &lt;/SelectItem&gt;&#10;                      ))}&#10;                      &lt;SelectItem value=&quot;Other&quot;&gt;Other / Custom Make&lt;/SelectItem&gt;&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.make &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.make.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;model&quot;&gt;Model *&lt;/Label&gt;&#10;              &lt;Select&#10;                onValueChange={(value) =&gt; setValue(&quot;model&quot;, value)}&#10;                disabled={!selectedMake}&#10;                defaultValue={initialData?.model}&#10;              &gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder={selectedMake ? &quot;Select model&quot; : &quot;Select make first&quot;} /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {loadingModels ? (&#10;                    &lt;SelectItem value=&quot;loading&quot; disabled&gt;Loading models...&lt;/SelectItem&gt;&#10;                  ) : selectedMake ? (&#10;                    &lt;&gt;&#10;                      {models.map((model) =&gt; (&#10;                        &lt;SelectItem key={model.id} value={model.name}&gt;&#10;                          {model.name}&#10;                        &lt;/SelectItem&gt;&#10;                      ))}&#10;                      &lt;SelectItem value=&quot;Other&quot;&gt;Other / Custom Model&lt;/SelectItem&gt;&#10;                    &lt;/&gt;&#10;                  ) : (&#10;                    &lt;SelectItem value=&quot;no-make&quot; disabled&gt;Select make first&lt;/SelectItem&gt;&#10;                  )}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.model &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.model.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            {/* Custom Make Input (when Other is selected) */}&#10;            {selectedMake === &quot;Other&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;customMake&quot;&gt;Custom Make *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;customMake&quot;&#10;                  value={customMake}&#10;                  placeholder=&quot;Enter custom make...&quot;&#10;                  onChange={(e) =&gt; {&#10;                    setCustomMake(e.target.value)&#10;                    setValue(&quot;make&quot;, e.target.value)&#10;                  }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Custom Model Input (when Other is selected) */}&#10;            {selectedModel === &quot;Other&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;customModel&quot;&gt;Custom Model *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;customModel&quot;&#10;                  value={customModel}&#10;                  placeholder=&quot;Enter custom model...&quot;&#10;                  onChange={(e) =&gt; {&#10;                    setCustomModel(e.target.value)&#10;                    setValue(&quot;model&quot;, e.target.value)&#10;                  }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;year&quot;&gt;Year *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;year&quot;, parseInt(value))}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select year&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {years.map((year) =&gt; (&#10;                    &lt;SelectItem key={year} value={year.toString()}&gt;&#10;                      {year}&#10;                    &lt;/SelectItem&gt;&#10;                  ))}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.year &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.year.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;trim&quot;&gt;Trim&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;trim&quot;&#10;                {...register(&quot;trim&quot;)}&#10;                placeholder=&quot;SE, EX, Limited...&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;bodyType&quot;&gt;Body Type *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;bodyType&quot;, value as any)}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select body type&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {loadingVehicleTypes ? (&#10;                    &lt;SelectItem value=&quot;loading&quot; disabled&gt;Loading vehicle types...&lt;/SelectItem&gt;&#10;                  ) : (&#10;                    &lt;&gt;&#10;                      {vehicleTypes.map((type) =&gt; (&#10;                        &lt;SelectItem key={type.id} value={type.name.toLowerCase()}&gt;&#10;                          {type.name}&#10;                        &lt;/SelectItem&gt;&#10;                      ))}&#10;                      &lt;SelectItem value=&quot;other&quot;&gt;Other&lt;/SelectItem&gt;&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.bodyType &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.bodyType.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;vin&quot;&gt;VIN (Optional)&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;vin&quot;&#10;              {...register(&quot;vin&quot;)}&#10;              placeholder=&quot;17-character VIN&quot;&#10;              maxLength={17}&#10;            /&gt;&#10;            {errors.vin &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.vin.message}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Engine &amp; Performance */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Engine &amp; Performance&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Technical specifications&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;engineSize&quot;&gt;Engine Size (L) *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;engineSize&quot;&#10;                type=&quot;number&quot;&#10;                step=&quot;0.1&quot;&#10;                {...register(&quot;engineSize&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;2.0&quot;&#10;              /&gt;&#10;              {errors.engineSize &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.engineSize.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;cylinders&quot;&gt;Cylinders *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;cylinders&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;cylinders&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;4&quot;&#10;              /&gt;&#10;              {errors.cylinders &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.cylinders.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;fuelType&quot;&gt;Fuel Type *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;fuelType&quot;, value as any)}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select fuel type&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {loadingFuelTypes ? (&#10;                    &lt;SelectItem value=&quot;loading&quot; disabled&gt;Loading fuel types...&lt;/SelectItem&gt;&#10;                  ) : (&#10;                    &lt;&gt;&#10;                      {fuelTypes.map((fuel) =&gt; (&#10;                        &lt;SelectItem key={fuel.id} value={fuel.name.toLowerCase()}&gt;&#10;                          {fuel.name}&#10;                        &lt;/SelectItem&gt;&#10;                      ))}&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.fuelType &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.fuelType.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;transmissionType&quot;&gt;Transmission *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;transmissionType&quot;, value as any)}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select transmission&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {loadingTransmissions ? (&#10;                    &lt;SelectItem value=&quot;loading&quot; disabled&gt;Loading transmissions...&lt;/SelectItem&gt;&#10;                  ) : (&#10;                    &lt;&gt;&#10;                      {transmissions.map((transmission) =&gt; (&#10;                        &lt;SelectItem key={transmission.id} value={transmission.name.toLowerCase()}&gt;&#10;                          {transmission.name}&#10;                        &lt;/SelectItem&gt;&#10;                      ))}&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.transmissionType &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.transmissionType.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;drivetrain&quot;&gt;Drivetrain *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;drivetrain&quot;, value as any)}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select drivetrain&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {loadingDriveTypes ? (&#10;                    &lt;SelectItem value=&quot;loading&quot; disabled&gt;Loading drive types...&lt;/SelectItem&gt;&#10;                  ) : (&#10;                    &lt;&gt;&#10;                      {driveTypes.map((drive) =&gt; (&#10;                        &lt;SelectItem key={drive.id} value={drive.name.toLowerCase()}&gt;&#10;                          {drive.name}&#10;                        &lt;/SelectItem&gt;&#10;                      ))}&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.drivetrain &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.drivetrain.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;horsepower&quot;&gt;Horsepower&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;horsepower&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;horsepower&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;200&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Condition &amp; Mileage */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Condition &amp; Mileage&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Vehicle condition and usage details&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;condition&quot;&gt;Condition *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;condition&quot;, value as any)}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select condition&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  &lt;SelectItem value=&quot;new&quot;&gt;New&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;used&quot;&gt;Used&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;certified-pre-owned&quot;&gt;Certified Pre-Owned&lt;/SelectItem&gt;&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.condition &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.condition.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;odometerValue&quot;&gt;Odometer Reading *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;odometerValue&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;odometerValue&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;50000&quot;&#10;              /&gt;&#10;              {errors.odometerValue &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.odometerValue.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;numberOfPreviousOwners&quot;&gt;Previous Owners&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;numberOfPreviousOwners&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;numberOfPreviousOwners&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;1&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Checkbox&#10;              id=&quot;accidentHistory&quot;&#10;              onCheckedChange={(checked) =&gt; setValue(&quot;accidentHistory&quot;, !!checked)}&#10;            /&gt;&#10;            &lt;Label htmlFor=&quot;accidentHistory&quot;&gt;Vehicle has accident history&lt;/Label&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Pricing */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Pricing&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Set pricing information&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;listPrice&quot;&gt;List Price (CAD) *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;listPrice&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;listPrice&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;25000&quot;&#10;              /&gt;&#10;              {errors.listPrice &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.listPrice.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;msrp&quot;&gt;MSRP (CAD)&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;msrp&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;msrp&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;28000&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;dealerCost&quot;&gt;Dealer Cost (CAD)&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;dealerCost&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;dealerCost&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;22000&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Physical Specifications */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Physical Specifications&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Colors and physical details&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;exteriorColor&quot;&gt;Exterior Color *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;exteriorColor&quot;&#10;                {...register(&quot;exteriorColor&quot;)}&#10;                placeholder=&quot;Black, White, Silver...&quot;&#10;              /&gt;&#10;              {errors.exteriorColor &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.exteriorColor.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;interiorColor&quot;&gt;Interior Color *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;interiorColor&quot;&#10;                {...register(&quot;interiorColor&quot;)}&#10;                placeholder=&quot;Black, Beige, Gray...&quot;&#10;              /&gt;&#10;              {errors.interiorColor &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.interiorColor.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;doors&quot;&gt;Number of Doors *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;doors&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;doors&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;4&quot;&#10;              /&gt;&#10;              {errors.doors &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.doors.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;seatingCapacity&quot;&gt;Seating Capacity *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;seatingCapacity&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;seatingCapacity&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;5&quot;&#10;              /&gt;&#10;              {errors.seatingCapacity &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.seatingCapacity.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Internal Tracking */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Internal Tracking&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Internal dealership information&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;stockNumber&quot;&gt;Stock Number *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;stockNumber&quot;&#10;                {...register(&quot;stockNumber&quot;)}&#10;                placeholder=&quot;STK001&quot;&#10;              /&gt;&#10;              {errors.stockNumber &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.stockNumber.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;acquisitionDate&quot;&gt;Acquisition Date *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;acquisitionDate&quot;&#10;                type=&quot;date&quot;&#10;                {...register(&quot;acquisitionDate&quot;)}&#10;              /&gt;&#10;              {errors.acquisitionDate &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.acquisitionDate.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;acquisitionCost&quot;&gt;Acquisition Cost (CAD)&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;acquisitionCost&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;acquisitionCost&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;20000&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;assignedSalesperson&quot;&gt;Assigned Salesperson&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;assignedSalesperson&quot;&#10;                {...register(&quot;assignedSalesperson&quot;)}&#10;                placeholder=&quot;John Doe&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;notes&quot;&gt;Internal Notes&lt;/Label&gt;&#10;            &lt;Textarea&#10;              id=&quot;notes&quot;&#10;              {...register(&quot;notes&quot;)}&#10;              placeholder=&quot;Any internal notes about this vehicle...&quot;&#10;              rows={3}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Marketing &amp; Description */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Marketing &amp; Description&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Public-facing information&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;description&quot;&gt;Description *&lt;/Label&gt;&#10;            &lt;Textarea&#10;              id=&quot;description&quot;&#10;              {...register(&quot;description&quot;)}&#10;              placeholder=&quot;Describe the vehicle features, condition, and selling points...&quot;&#10;              rows={4}&#10;            /&gt;&#10;            {errors.description &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.description.message}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;specialOffer&quot;&gt;Special Offer&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;specialOffer&quot;&#10;              {...register(&quot;specialOffer&quot;)}&#10;              placeholder=&quot;Weekend Special, No Payments for 3 months...&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Checkbox&#10;              id=&quot;featured&quot;&#10;              onCheckedChange={(checked) =&gt; setValue(&quot;featured&quot;, !!checked)}&#10;            /&gt;&#10;            &lt;Label htmlFor=&quot;featured&quot;&gt;Feature this vehicle on the homepage&lt;/Label&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Status &amp; Availability */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Status &amp; Availability&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Current status and availability&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;status&quot;&gt;Status *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;status&quot;, value as any)}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select status&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  &lt;SelectItem value=&quot;available&quot;&gt;Available&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;sold&quot;&gt;Sold&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;pending&quot;&gt;Pending&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;reserved&quot;&gt;Reserved&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;on-hold&quot;&gt;On Hold&lt;/SelectItem&gt;&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.status &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.status.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;Checkbox&#10;                id=&quot;inStock&quot;&#10;                onCheckedChange={(checked) =&gt; setValue(&quot;inStock&quot;, !!checked)}&#10;              /&gt;&#10;              &lt;Label htmlFor=&quot;inStock&quot;&gt;Currently in stock&lt;/Label&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;Separator /&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label&gt;Ontario Specific Requirements&lt;/Label&gt;&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;Checkbox&#10;                  id=&quot;safetyStandardPassed&quot;&#10;                  onCheckedChange={(checked) =&gt; setValue(&quot;safetyStandardPassed&quot;, !!checked)}&#10;                /&gt;&#10;                &lt;Label htmlFor=&quot;safetyStandardPassed&quot;&gt;Safety standard certification passed&lt;/Label&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;Checkbox&#10;                  id=&quot;hasCleanHistory&quot;&#10;                  onCheckedChange={(checked) =&gt; setValue(&quot;hasCleanHistory&quot;, !!checked)}&#10;                /&gt;&#10;                &lt;Label htmlFor=&quot;hasCleanHistory&quot;&gt;Clean CarFax history&lt;/Label&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;carfaxReportUrl&quot;&gt;CarFax Report URL&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;carfaxReportUrl&quot;&#10;              {...register(&quot;carfaxReportUrl&quot;)}&#10;              placeholder=&quot;https://carfax.com/report/...&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Submit Button */}&#10;      &lt;div className=&quot;flex justify-end gap-4&quot;&gt;&#10;        &lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&gt;&#10;          Cancel&#10;        &lt;/Button&gt;&#10;        &lt;Button type=&quot;submit&quot; disabled={isLoading}&gt;&#10;          {isLoading ? &quot;Saving...&quot; : mode === &quot;add&quot; ? &quot;Add Vehicle&quot; : &quot;Update Vehicle&quot;}&#10;        &lt;/Button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/form&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="import { useState, useEffect } from &quot;react&quot;&#10;import { useForm } from &quot;react-hook-form&quot;&#10;import { zodResolver } from &quot;@hookform/resolvers/zod&quot;&#10;import { Button } from &quot;~/components/ui/button&quot;&#10;import { Card, CardContent, CardDescription, CardHeader, CardTitle } from &quot;~/components/ui/card&quot;&#10;import { Input } from &quot;~/components/ui/input&quot;&#10;import { Label } from &quot;~/components/ui/label&quot;&#10;import { Textarea } from &quot;~/components/ui/textarea&quot;&#10;import { Checkbox } from &quot;~/components/ui/checkbox&quot;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;~/components/ui/select&quot;&#10;import { Separator } from &quot;~/components/ui/separator&quot;&#10;import { vehicleFormSchema, defaultVehicleValues, type VehicleFormData } from &quot;./schema&quot;&#10;import { makesApiService } from &quot;~/components/makes/makes-api&quot;&#10;import { modelsApiService } from &quot;~/components/models/models-api&quot;&#10;import { vehicleTypesApiService } from &quot;~/components/vehicle-types/vehicle-types-api&quot;&#10;import { fuelTypesApiService } from &quot;~/components/fuel-types/fuel-types-api&quot;&#10;import { transmissionsApiService } from &quot;~/components/transmissions/transmissions-api&quot;&#10;import { driveTypesApiService } from &quot;~/components/drive-types/drive-types-api&quot;&#10;import type { Make } from &quot;~/types/make&quot;&#10;import type { Model } from &quot;~/types/model&quot;&#10;import type { VehicleType } from &quot;~/types/vehicle-type&quot;&#10;import type { FuelType } from &quot;~/types/fuel-type&quot;&#10;import type { Transmission } from &quot;~/types/transmission&quot;&#10;import type { DriveType } from &quot;~/types/drive-type&quot;&#10;&#10;type VehicleFormProps = {&#10;  initialData?: Partial&lt;VehicleFormData&gt;&#10;  onSubmit: (data: VehicleFormData) =&gt; void&#10;  isLoading?: boolean&#10;  mode: &quot;add&quot; | &quot;edit&quot;&#10;}&#10;&#10;export function VehicleForm({ initialData, onSubmit, isLoading = false, mode }: VehicleFormProps) {&#10;  const [customMake, setCustomMake] = useState(&quot;&quot;)&#10;  const [customModel, setCustomModel] = useState(&quot;&quot;)&#10;&#10;  // API Data State&#10;  const [makes, setMakes] = useState&lt;Make[]&gt;([])&#10;  const [models, setModels] = useState&lt;Model[]&gt;([])&#10;  const [vehicleTypes, setVehicleTypes] = useState&lt;VehicleType[]&gt;([])&#10;  const [fuelTypes, setFuelTypes] = useState&lt;FuelType[]&gt;([])&#10;  const [transmissions, setTransmissions] = useState&lt;Transmission[]&gt;([])&#10;  const [driveTypes, setDriveTypes] = useState&lt;DriveType[]&gt;([])&#10;  const [loadingMakes, setLoadingMakes] = useState(true)&#10;  const [loadingModels, setLoadingModels] = useState(false)&#10;  const [loadingVehicleTypes, setLoadingVehicleTypes] = useState(true)&#10;  const [loadingFuelTypes, setLoadingFuelTypes] = useState(true)&#10;  const [loadingTransmissions, setLoadingTransmissions] = useState(true)&#10;  const [loadingDriveTypes, setLoadingDriveTypes] = useState(true)&#10;&#10;  const {&#10;    register,&#10;    handleSubmit,&#10;    setValue,&#10;    watch,&#10;    formState: { errors },&#10;  } = useForm&lt;VehicleFormData&gt;({&#10;    resolver: zodResolver(vehicleFormSchema),&#10;    defaultValues: {&#10;      ...defaultVehicleValues,&#10;      ...initialData,&#10;    },&#10;  })&#10;&#10;  // Watch the selected make to update available models&#10;  const selectedMake = watch(&quot;make&quot;)&#10;  const selectedModel = watch(&quot;model&quot;)&#10;&#10;  const currentYear = new Date().getFullYear()&#10;  const years = Array.from({ length: currentYear - 1990 + 1 }, (_, i) =&gt; currentYear - i)&#10;&#10;  // Fetch Makes&#10;  useEffect(() =&gt; {&#10;    const fetchMakes = async () =&gt; {&#10;      try {&#10;        setLoadingMakes(true)&#10;        const response = await makesApiService.getAllWithFilters({&#10;          active: true,&#10;          sortBy: 'name',&#10;          sortOrder: 'asc',&#10;          limit: 1000&#10;        })&#10;        setMakes(response.data || [])&#10;      } catch (error) {&#10;        console.error('Error fetching makes:', error)&#10;      } finally {&#10;        setLoadingMakes(false)&#10;      }&#10;    }&#10;&#10;    fetchMakes()&#10;  }, [])&#10;&#10;  // Fetch Vehicle Types&#10;  useEffect(() =&gt; {&#10;    const fetchVehicleTypes = async () =&gt; {&#10;      try {&#10;        setLoadingVehicleTypes(true)&#10;        const response = await vehicleTypesApiService.getAllWithFilters({&#10;          active: true,&#10;          sortBy: 'name',&#10;          sortOrder: 'asc',&#10;          limit: 1000&#10;        })&#10;        setVehicleTypes(response.data || [])&#10;      } catch (error) {&#10;        console.error('Error fetching vehicle types:', error)&#10;      } finally {&#10;        setLoadingVehicleTypes(false)&#10;      }&#10;    }&#10;&#10;    fetchVehicleTypes()&#10;  }, [])&#10;&#10;  // Fetch Fuel Types using dropdown endpoint&#10;  useEffect(() =&gt; {&#10;    const fetchFuelTypes = async () =&gt; {&#10;      try {&#10;        setLoadingFuelTypes(true)&#10;        const response = await fuelTypesApiService.getForDropdown()&#10;        setFuelTypes(response.data || [])&#10;      } catch (error) {&#10;        console.error('Error fetching fuel types:', error)&#10;      } finally {&#10;        setLoadingFuelTypes(false)&#10;      }&#10;    }&#10;&#10;    fetchFuelTypes()&#10;  }, [])&#10;&#10;  // Fetch Transmissions using dropdown endpoint&#10;  useEffect(() =&gt; {&#10;    const fetchTransmissions = async () =&gt; {&#10;      try {&#10;        setLoadingTransmissions(true)&#10;        const response = await transmissionsApiService.getDropdownItems()&#10;        setTransmissions(response.data || [])&#10;      } catch (error) {&#10;        console.error('Error fetching transmissions:', error)&#10;      } finally {&#10;        setLoadingTransmissions(false)&#10;      }&#10;    }&#10;&#10;    fetchTransmissions()&#10;  }, [])&#10;&#10;  // Fetch Drive Types using dropdown endpoint&#10;  useEffect(() =&gt; {&#10;    const fetchDriveTypes = async () =&gt; {&#10;      try {&#10;        setLoadingDriveTypes(true)&#10;        const response = await driveTypesApiService.getActiveForDropdown()&#10;        setDriveTypes(response.data || [])&#10;      } catch (error) {&#10;        console.error('Error fetching drive types:', error)&#10;      } finally {&#10;        setLoadingDriveTypes(false)&#10;      }&#10;    }&#10;&#10;    fetchDriveTypes()&#10;  }, [])&#10;&#10;  // Fetch Models when make changes&#10;  useEffect(() =&gt; {&#10;    const fetchModels = async () =&gt; {&#10;      if (!selectedMake || selectedMake === &quot;Other&quot;) {&#10;        setModels([])&#10;        return&#10;      }&#10;&#10;      try {&#10;        setLoadingModels(true)&#10;        console.log('Fetching models for make:', selectedMake)&#10;        console.log('Available makes:', makes)&#10;&#10;        // Find the make ID - check both id and _id fields&#10;        const selectedMakeObj = makes.find(make =&gt;&#10;          make.name === selectedMake ||&#10;          make.name?.toLowerCase() === selectedMake.toLowerCase()&#10;        )&#10;&#10;        console.log('Selected make object:', selectedMakeObj)&#10;&#10;        if (!selectedMakeObj) {&#10;          console.warn('Make not found in API data, skipping model fetch')&#10;          setModels([])&#10;          return&#10;        }&#10;&#10;        // Use _id if available, fallback to id&#10;        const makeId = selectedMakeObj._id || selectedMakeObj.id&#10;&#10;        console.log('Using make ID:', makeId)&#10;&#10;        const response = await modelsApiService.getAllWithFilters({&#10;          make: makeId,&#10;          active: true,&#10;          sortBy: 'name',&#10;          sortOrder: 'asc',&#10;          limit: 1000&#10;        })&#10;&#10;        console.log('Models API response:', response)&#10;        setModels(response.data?.models || response.data || [])&#10;      } catch (error) {&#10;        console.error('Error fetching models:', error)&#10;        setModels([])&#10;      } finally {&#10;        setLoadingModels(false)&#10;      }&#10;    }&#10;&#10;    // Only fetch models if we have makes data and a selected make&#10;    if (makes.length &gt; 0 &amp;&amp; selectedMake &amp;&amp; selectedMake !== &quot;Other&quot;) {&#10;      fetchModels()&#10;    } else if (!selectedMake || selectedMake === &quot;Other&quot;) {&#10;      setModels([])&#10;    }&#10;  }, [selectedMake, makes])&#10;&#10;  // Get display data for dropdowns - only use real API data&#10;  const displayMakes = makes&#10;&#10;  return (&#10;    &lt;form onSubmit={handleSubmit(onSubmit)} className=&quot;space-y-6&quot;&gt;&#10;      {/* Basic Vehicle Information */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Basic Vehicle Information&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Enter the core details about the vehicle&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;make&quot;&gt;Make *&lt;/Label&gt;&#10;              &lt;Select&#10;                onValueChange={(value) =&gt; {&#10;                  setValue(&quot;make&quot;, value)&#10;                  setValue(&quot;model&quot;, &quot;&quot;) // Reset model when make changes&#10;                }}&#10;                defaultValue={initialData?.make}&#10;              &gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select make&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {loadingMakes ? (&#10;                    &lt;SelectItem value=&quot;loading&quot; disabled&gt;Loading makes...&lt;/SelectItem&gt;&#10;                  ) : (&#10;                    &lt;&gt;&#10;                      {displayMakes.map((make) =&gt; (&#10;                        &lt;SelectItem key={make.id || make.name} value={make.name}&gt;&#10;                          {make.name}&#10;                        &lt;/SelectItem&gt;&#10;                      ))}&#10;                      &lt;SelectItem value=&quot;Other&quot;&gt;Other / Custom Make&lt;/SelectItem&gt;&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.make &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.make.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;model&quot;&gt;Model *&lt;/Label&gt;&#10;              &lt;Select&#10;                onValueChange={(value) =&gt; setValue(&quot;model&quot;, value)}&#10;                disabled={!selectedMake}&#10;                defaultValue={initialData?.model}&#10;              &gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder={selectedMake ? &quot;Select model&quot; : &quot;Select make first&quot;} /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {loadingModels ? (&#10;                    &lt;SelectItem value=&quot;loading&quot; disabled&gt;Loading models...&lt;/SelectItem&gt;&#10;                  ) : selectedMake ? (&#10;                    &lt;&gt;&#10;                      {models.map((model) =&gt; (&#10;                        &lt;SelectItem key={model.id} value={model.name}&gt;&#10;                          {model.name}&#10;                        &lt;/SelectItem&gt;&#10;                      ))}&#10;                      &lt;SelectItem value=&quot;Other&quot;&gt;Other / Custom Model&lt;/SelectItem&gt;&#10;                    &lt;/&gt;&#10;                  ) : (&#10;                    &lt;SelectItem value=&quot;no-make&quot; disabled&gt;Select make first&lt;/SelectItem&gt;&#10;                  )}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.model &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.model.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            {/* Custom Make Input (when Other is selected) */}&#10;            {selectedMake === &quot;Other&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;customMake&quot;&gt;Custom Make *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;customMake&quot;&#10;                  value={customMake}&#10;                  placeholder=&quot;Enter custom make...&quot;&#10;                  onChange={(e) =&gt; {&#10;                    setCustomMake(e.target.value)&#10;                    setValue(&quot;make&quot;, e.target.value)&#10;                  }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Custom Model Input (when Other is selected) */}&#10;            {selectedModel === &quot;Other&quot; &amp;&amp; (&#10;              &lt;div className=&quot;space-y-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;customModel&quot;&gt;Custom Model *&lt;/Label&gt;&#10;                &lt;Input&#10;                  id=&quot;customModel&quot;&#10;                  value={customModel}&#10;                  placeholder=&quot;Enter custom model...&quot;&#10;                  onChange={(e) =&gt; {&#10;                    setCustomModel(e.target.value)&#10;                    setValue(&quot;model&quot;, e.target.value)&#10;                  }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;year&quot;&gt;Year *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;year&quot;, parseInt(value))}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select year&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {years.map((year) =&gt; (&#10;                    &lt;SelectItem key={year} value={year.toString()}&gt;&#10;                      {year}&#10;                    &lt;/SelectItem&gt;&#10;                  ))}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.year &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.year.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;trim&quot;&gt;Trim&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;trim&quot;&#10;                {...register(&quot;trim&quot;)}&#10;                placeholder=&quot;SE, EX, Limited...&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;bodyType&quot;&gt;Body Type *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;bodyType&quot;, value as any)}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select body type&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {loadingVehicleTypes ? (&#10;                    &lt;SelectItem value=&quot;loading&quot; disabled&gt;Loading vehicle types...&lt;/SelectItem&gt;&#10;                  ) : (&#10;                    &lt;&gt;&#10;                      {vehicleTypes.map((type) =&gt; (&#10;                        &lt;SelectItem key={type.id} value={type.name.toLowerCase()}&gt;&#10;                          {type.name}&#10;                        &lt;/SelectItem&gt;&#10;                      ))}&#10;                      &lt;SelectItem value=&quot;other&quot;&gt;Other&lt;/SelectItem&gt;&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.bodyType &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.bodyType.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;vin&quot;&gt;VIN (Optional)&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;vin&quot;&#10;              {...register(&quot;vin&quot;)}&#10;              placeholder=&quot;17-character VIN&quot;&#10;              maxLength={17}&#10;            /&gt;&#10;            {errors.vin &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.vin.message}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Engine &amp; Performance */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Engine &amp; Performance&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Technical specifications&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;engineSize&quot;&gt;Engine Size (L) *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;engineSize&quot;&#10;                type=&quot;number&quot;&#10;                step=&quot;0.1&quot;&#10;                {...register(&quot;engineSize&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;2.0&quot;&#10;              /&gt;&#10;              {errors.engineSize &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.engineSize.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;cylinders&quot;&gt;Cylinders *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;cylinders&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;cylinders&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;4&quot;&#10;              /&gt;&#10;              {errors.cylinders &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.cylinders.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;fuelType&quot;&gt;Fuel Type *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;fuelType&quot;, value as any)}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select fuel type&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {loadingFuelTypes ? (&#10;                    &lt;SelectItem value=&quot;loading&quot; disabled&gt;Loading fuel types...&lt;/SelectItem&gt;&#10;                  ) : (&#10;                    &lt;&gt;&#10;                      {fuelTypes.map((fuel) =&gt; (&#10;                        &lt;SelectItem key={fuel.id} value={fuel.name.toLowerCase()}&gt;&#10;                          {fuel.name}&#10;                        &lt;/SelectItem&gt;&#10;                      ))}&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.fuelType &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.fuelType.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;transmissionType&quot;&gt;Transmission *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;transmissionType&quot;, value as any)}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select transmission&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {loadingTransmissions ? (&#10;                    &lt;SelectItem value=&quot;loading&quot; disabled&gt;Loading transmissions...&lt;/SelectItem&gt;&#10;                  ) : (&#10;                    &lt;&gt;&#10;                      {transmissions.map((transmission) =&gt; (&#10;                        &lt;SelectItem key={transmission.id} value={transmission.name.toLowerCase()}&gt;&#10;                          {transmission.name}&#10;                        &lt;/SelectItem&gt;&#10;                      ))}&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.transmissionType &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.transmissionType.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;drivetrain&quot;&gt;Drivetrain *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;drivetrain&quot;, value as any)}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select drivetrain&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  {loadingDriveTypes ? (&#10;                    &lt;SelectItem value=&quot;loading&quot; disabled&gt;Loading drive types...&lt;/SelectItem&gt;&#10;                  ) : (&#10;                    &lt;&gt;&#10;                      {driveTypes.map((drive) =&gt; (&#10;                        &lt;SelectItem key={drive.id} value={drive.name.toLowerCase()}&gt;&#10;                          {drive.name}&#10;                        &lt;/SelectItem&gt;&#10;                      ))}&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.drivetrain &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.drivetrain.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;horsepower&quot;&gt;Horsepower&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;horsepower&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;horsepower&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;200&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Condition &amp; Mileage */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Condition &amp; Mileage&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Vehicle condition and usage details&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;condition&quot;&gt;Condition *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;condition&quot;, value as any)}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select condition&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  &lt;SelectItem value=&quot;new&quot;&gt;New&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;used&quot;&gt;Used&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;certified-pre-owned&quot;&gt;Certified Pre-Owned&lt;/SelectItem&gt;&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.condition &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.condition.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;odometerValue&quot;&gt;Odometer Reading *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;odometerValue&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;odometerValue&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;50000&quot;&#10;              /&gt;&#10;              {errors.odometerValue &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.odometerValue.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;numberOfPreviousOwners&quot;&gt;Previous Owners&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;numberOfPreviousOwners&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;numberOfPreviousOwners&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;1&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Checkbox&#10;              id=&quot;accidentHistory&quot;&#10;              onCheckedChange={(checked) =&gt; setValue(&quot;accidentHistory&quot;, !!checked)}&#10;            /&gt;&#10;            &lt;Label htmlFor=&quot;accidentHistory&quot;&gt;Vehicle has accident history&lt;/Label&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Pricing */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Pricing&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Set pricing information&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;listPrice&quot;&gt;List Price (CAD) *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;listPrice&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;listPrice&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;25000&quot;&#10;              /&gt;&#10;              {errors.listPrice &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.listPrice.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;msrp&quot;&gt;MSRP (CAD)&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;msrp&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;msrp&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;28000&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;dealerCost&quot;&gt;Dealer Cost (CAD)&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;dealerCost&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;dealerCost&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;22000&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Physical Specifications */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Physical Specifications&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Colors and physical details&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;exteriorColor&quot;&gt;Exterior Color *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;exteriorColor&quot;&#10;                {...register(&quot;exteriorColor&quot;)}&#10;                placeholder=&quot;Black, White, Silver...&quot;&#10;              /&gt;&#10;              {errors.exteriorColor &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.exteriorColor.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;interiorColor&quot;&gt;Interior Color *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;interiorColor&quot;&#10;                {...register(&quot;interiorColor&quot;)}&#10;                placeholder=&quot;Black, Beige, Gray...&quot;&#10;              /&gt;&#10;              {errors.interiorColor &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.interiorColor.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;doors&quot;&gt;Number of Doors *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;doors&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;doors&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;4&quot;&#10;              /&gt;&#10;              {errors.doors &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.doors.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;seatingCapacity&quot;&gt;Seating Capacity *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;seatingCapacity&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;seatingCapacity&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;5&quot;&#10;              /&gt;&#10;              {errors.seatingCapacity &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.seatingCapacity.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Internal Tracking */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Internal Tracking&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Internal dealership information&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;stockNumber&quot;&gt;Stock Number *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;stockNumber&quot;&#10;                {...register(&quot;stockNumber&quot;)}&#10;                placeholder=&quot;STK001&quot;&#10;              /&gt;&#10;              {errors.stockNumber &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.stockNumber.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;acquisitionDate&quot;&gt;Acquisition Date *&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;acquisitionDate&quot;&#10;                type=&quot;date&quot;&#10;                {...register(&quot;acquisitionDate&quot;)}&#10;              /&gt;&#10;              {errors.acquisitionDate &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.acquisitionDate.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;acquisitionCost&quot;&gt;Acquisition Cost (CAD)&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;acquisitionCost&quot;&#10;                type=&quot;number&quot;&#10;                {...register(&quot;acquisitionCost&quot;, { valueAsNumber: true })}&#10;                placeholder=&quot;20000&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;assignedSalesperson&quot;&gt;Assigned Salesperson&lt;/Label&gt;&#10;              &lt;Input&#10;                id=&quot;assignedSalesperson&quot;&#10;                {...register(&quot;assignedSalesperson&quot;)}&#10;                placeholder=&quot;John Doe&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;notes&quot;&gt;Internal Notes&lt;/Label&gt;&#10;            &lt;Textarea&#10;              id=&quot;notes&quot;&#10;              {...register(&quot;notes&quot;)}&#10;              placeholder=&quot;Any internal notes about this vehicle...&quot;&#10;              rows={3}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Marketing &amp; Description */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Marketing &amp; Description&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Public-facing information&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;description&quot;&gt;Description *&lt;/Label&gt;&#10;            &lt;Textarea&#10;              id=&quot;description&quot;&#10;              {...register(&quot;description&quot;)}&#10;              placeholder=&quot;Describe the vehicle features, condition, and selling points...&quot;&#10;              rows={4}&#10;            /&gt;&#10;            {errors.description &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.description.message}&lt;/p&gt;}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;specialOffer&quot;&gt;Special Offer&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;specialOffer&quot;&#10;              {...register(&quot;specialOffer&quot;)}&#10;              placeholder=&quot;Weekend Special, No Payments for 3 months...&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;Checkbox&#10;              id=&quot;featured&quot;&#10;              onCheckedChange={(checked) =&gt; setValue(&quot;featured&quot;, !!checked)}&#10;            /&gt;&#10;            &lt;Label htmlFor=&quot;featured&quot;&gt;Feature this vehicle on the homepage&lt;/Label&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Status &amp; Availability */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;Status &amp; Availability&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;Current status and availability&lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              &lt;Label htmlFor=&quot;status&quot;&gt;Status *&lt;/Label&gt;&#10;              &lt;Select onValueChange={(value) =&gt; setValue(&quot;status&quot;, value as any)}&gt;&#10;                &lt;SelectTrigger className=&quot;w-full&quot;&gt;&#10;                  &lt;SelectValue placeholder=&quot;Select status&quot; /&gt;&#10;                &lt;/SelectTrigger&gt;&#10;                &lt;SelectContent&gt;&#10;                  &lt;SelectItem value=&quot;available&quot;&gt;Available&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;sold&quot;&gt;Sold&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;pending&quot;&gt;Pending&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;reserved&quot;&gt;Reserved&lt;/SelectItem&gt;&#10;                  &lt;SelectItem value=&quot;on-hold&quot;&gt;On Hold&lt;/SelectItem&gt;&#10;                &lt;/SelectContent&gt;&#10;              &lt;/Select&gt;&#10;              {errors.status &amp;&amp; &lt;p className=&quot;text-sm text-red-600&quot;&gt;{errors.status.message}&lt;/p&gt;}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;Checkbox&#10;                id=&quot;inStock&quot;&#10;                onCheckedChange={(checked) =&gt; setValue(&quot;inStock&quot;, !!checked)}&#10;              /&gt;&#10;              &lt;Label htmlFor=&quot;inStock&quot;&gt;Currently in stock&lt;/Label&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;Separator /&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label&gt;Ontario Specific Requirements&lt;/Label&gt;&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;Checkbox&#10;                  id=&quot;safetyStandardPassed&quot;&#10;                  onCheckedChange={(checked) =&gt; setValue(&quot;safetyStandardPassed&quot;, !!checked)}&#10;                /&gt;&#10;                &lt;Label htmlFor=&quot;safetyStandardPassed&quot;&gt;Safety standard certification passed&lt;/Label&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;Checkbox&#10;                  id=&quot;hasCleanHistory&quot;&#10;                  onCheckedChange={(checked) =&gt; setValue(&quot;hasCleanHistory&quot;, !!checked)}&#10;                /&gt;&#10;                &lt;Label htmlFor=&quot;hasCleanHistory&quot;&gt;Clean CarFax history&lt;/Label&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            &lt;Label htmlFor=&quot;carfaxReportUrl&quot;&gt;CarFax Report URL&lt;/Label&gt;&#10;            &lt;Input&#10;              id=&quot;carfaxReportUrl&quot;&#10;              {...register(&quot;carfaxReportUrl&quot;)}&#10;              placeholder=&quot;https://carfax.com/report/...&quot;&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;&#10;      {/* Submit Button */}&#10;      &lt;div className=&quot;flex justify-end gap-4&quot;&gt;&#10;        &lt;Button type=&quot;button&quot; variant=&quot;outline&quot;&gt;&#10;          Cancel&#10;        &lt;/Button&gt;&#10;        &lt;Button type=&quot;submit&quot; disabled={isLoading}&gt;&#10;          {isLoading ? &quot;Saving...&quot; : mode === &quot;add&quot; ? &quot;Add Vehicle&quot; : &quot;Update Vehicle&quot;}&#10;        &lt;/Button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/form&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/genericCrudService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/genericCrudService.ts" />
              <option name="originalContent" value="export interface CrudEntity {&#10;  id?: string;&#10;  createdAt?: string;&#10;  updatedAt?: string;&#10;}&#10;&#10;export class GenericCrudService&lt;T extends CrudEntity&gt; {&#10;  protected baseUrl: string;&#10;&#10;  constructor(endpoint: string) {&#10;    this.baseUrl = `${process.env.REACT_APP_API_URL || 'http://localhost:3001/api'}/${endpoint}`;&#10;  }&#10;&#10;  async getAll(): Promise&lt;T[]&gt; {&#10;    const response = await fetch(this.baseUrl);&#10;    if (!response.ok) throw new Error('Failed to fetch items');&#10;    return response.json();&#10;  }&#10;&#10;  async getById(id: string): Promise&lt;T&gt; {&#10;    const response = await fetch(`${this.baseUrl}/${id}`);&#10;    if (!response.ok) throw new Error('Failed to fetch item');&#10;    return response.json();&#10;  }&#10;&#10;  async create(item: Omit&lt;T, 'id' | 'createdAt' | 'updatedAt'&gt;): Promise&lt;T&gt; {&#10;    const response = await fetch(this.baseUrl, {&#10;      method: 'POST',&#10;      headers: {&#10;        'Content-Type': 'application/json',&#10;      },&#10;      body: JSON.stringify(item),&#10;    });&#10;    if (!response.ok) throw new Error('Failed to create item');&#10;    return response.json();&#10;  }&#10;&#10;  async update(id: string, item: Partial&lt;T&gt;): Promise&lt;T&gt; {&#10;    const response = await fetch(`${this.baseUrl}/${id}`, {&#10;      method: 'PUT',&#10;      headers: {&#10;        'Content-Type': 'application/json',&#10;      },&#10;      body: JSON.stringify(item),&#10;    });&#10;    if (!response.ok) throw new Error('Failed to update item');&#10;    return response.json();&#10;  }&#10;&#10;  async delete(id: string): Promise&lt;void&gt; {&#10;    const response = await fetch(`${this.baseUrl}/${id}`, {&#10;      method: 'DELETE',&#10;    });&#10;    if (!response.ok) throw new Error('Failed to delete item');&#10;  }&#10;}" />
              <option name="updatedContent" value="export interface CrudEntity {&#10;  id?: string;&#10;  createdAt?: string;&#10;  updatedAt?: string;&#10;}&#10;&#10;export class GenericCrudService&lt;T extends CrudEntity&gt; {&#10;  protected baseUrl: string;&#10;&#10;  constructor(endpoint: string) {&#10;    this.baseUrl = `${process.env.REACT_APP_API_URL || 'http://localhost:3001/api'}/${endpoint}`;&#10;  }&#10;&#10;  async getAll(): Promise&lt;T[]&gt; {&#10;    const response = await fetch(this.baseUrl);&#10;    if (!response.ok) throw new Error('Failed to fetch items');&#10;    return response.json();&#10;  }&#10;&#10;  async getById(id: string): Promise&lt;T&gt; {&#10;    const response = await fetch(`${this.baseUrl}/${id}`);&#10;    if (!response.ok) throw new Error('Failed to fetch item');&#10;    return response.json();&#10;  }&#10;&#10;  async create(item: Omit&lt;T, 'id' | 'createdAt' | 'updatedAt'&gt;): Promise&lt;T&gt; {&#10;    const response = await fetch(this.baseUrl, {&#10;      method: 'POST',&#10;      headers: {&#10;        'Content-Type': 'application/json',&#10;      },&#10;      body: JSON.stringify(item),&#10;    });&#10;    if (!response.ok) throw new Error('Failed to create item');&#10;    return response.json();&#10;  }&#10;&#10;  async update(id: string, item: Partial&lt;T&gt;): Promise&lt;T&gt; {&#10;    const response = await fetch(`${this.baseUrl}/${id}`, {&#10;      method: 'PUT',&#10;      headers: {&#10;        'Content-Type': 'application/json',&#10;      },&#10;      body: JSON.stringify(item),&#10;    });&#10;    if (!response.ok) throw new Error('Failed to update item');&#10;    return response.json();&#10;  }&#10;&#10;  async delete(id: string): Promise&lt;void&gt; {&#10;    const response = await fetch(`${this.baseUrl}/${id}`, {&#10;      method: 'DELETE',&#10;    });&#10;    if (!response.ok) throw new Error('Failed to delete item');&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>