<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/components/generic/GenericCrudList.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/generic/GenericCrudList.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { CrudEntity } from '../../services/genericCrudService';&#10;&#10;interface Column&lt;T&gt; {&#10;  key: keyof T | string;&#10;  header: string;&#10;  render?: (item: T) =&gt; React.ReactNode;&#10;}&#10;&#10;interface GenericCrudListProps&lt;T extends CrudEntity&gt; {&#10;  items: T[];&#10;  columns: Column&lt;T&gt;[];&#10;  onEdit: (item: T) =&gt; void;&#10;  onDelete: (id: string) =&gt; void;&#10;  onAdd: () =&gt; void;&#10;  title: string;&#10;  loading?: boolean;&#10;}&#10;&#10;export function GenericCrudList&lt;T extends CrudEntity&gt;({&#10;  items,&#10;  columns,&#10;  onEdit,&#10;  onDelete,&#10;  onAdd,&#10;  title,&#10;  loading = false&#10;}: GenericCrudListProps&lt;T&gt;) {&#10;  if (loading) {&#10;    return &lt;div className=&quot;p-4&quot;&gt;Loading...&lt;/div&gt;;&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;p-6&quot;&gt;&#10;      &lt;div className=&quot;flex justify-between items-center mb-6&quot;&gt;&#10;        &lt;h1 className=&quot;text-2xl font-bold&quot;&gt;{title}&lt;/h1&gt;&#10;        &lt;button&#10;          onClick={onAdd}&#10;          className=&quot;px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700&quot;&#10;        &gt;&#10;          Add New&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;        &lt;table className=&quot;min-w-full bg-white border border-gray-200&quot;&gt;&#10;          &lt;thead className=&quot;bg-gray-50&quot;&gt;&#10;            &lt;tr&gt;&#10;              {columns.map((column) =&gt; (&#10;                &lt;th&#10;                  key={String(column.key)}&#10;                  className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&#10;                &gt;&#10;                  {column.header}&#10;                &lt;/th&gt;&#10;              ))}&#10;              &lt;th className=&quot;px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider&quot;&gt;&#10;                Actions&#10;              &lt;/th&gt;&#10;            &lt;/tr&gt;&#10;          &lt;/thead&gt;&#10;          &lt;tbody className=&quot;bg-white divide-y divide-gray-200&quot;&gt;&#10;            {items.map((item) =&gt; (&#10;              &lt;tr key={item.id}&gt;&#10;                {columns.map((column) =&gt; (&#10;                  &lt;td key={String(column.key)} className=&quot;px-6 py-4 whitespace-nowrap text-sm text-gray-900&quot;&gt;&#10;                    {column.render &#10;                      ? column.render(item)&#10;                      : String(item[column.key as keyof T] || '')&#10;                    }&#10;                  &lt;/td&gt;&#10;                ))}&#10;                &lt;td className=&quot;px-6 py-4 whitespace-nowrap text-sm font-medium&quot;&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; onEdit(item)}&#10;                    className=&quot;text-indigo-600 hover:text-indigo-900 mr-4&quot;&#10;                  &gt;&#10;                    Edit&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; onDelete(item.id!)}&#10;                    className=&quot;text-red-600 hover:text-red-900&quot;&#10;                  &gt;&#10;                    Delete&#10;                  &lt;/button&gt;&#10;                &lt;/td&gt;&#10;              &lt;/tr&gt;&#10;            ))}&#10;          &lt;/tbody&gt;&#10;        &lt;/table&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/Makes.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/Makes.tsx" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { GenericCrudList } from '../components/generic/GenericCrudList';&#10;import { Make, makesService } from '../services/makesService';&#10;&#10;export function Makes() {&#10;  const [makes, setMakes] = useState&lt;Make[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [editingMake, setEditingMake] = useState&lt;Make | null&gt;(null);&#10;  const [showForm, setShowForm] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    loadMakes();&#10;  }, []);&#10;&#10;  const loadMakes = async () =&gt; {&#10;    try {&#10;      const data = await makesService.getAll();&#10;      setMakes(data);&#10;    } catch (error) {&#10;      console.error('Failed to load makes:', error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleEdit = (make: Make) =&gt; {&#10;    setEditingMake(make);&#10;    setShowForm(true);&#10;  };&#10;&#10;  const handleDelete = async (id: string) =&gt; {&#10;    if (window.confirm('Are you sure you want to delete this make?')) {&#10;      try {&#10;        await makesService.delete(id);&#10;        await loadMakes();&#10;      } catch (error) {&#10;        console.error('Failed to delete make:', error);&#10;      }&#10;    }&#10;  };&#10;&#10;  const handleAdd = () =&gt; {&#10;    setEditingMake(null);&#10;    setShowForm(true);&#10;  };&#10;&#10;  const columns = [&#10;    { key: 'name' as keyof Make, header: 'Name' },&#10;    { key: 'description' as keyof Make, header: 'Description' },&#10;    {&#10;      key: 'isActive' as keyof Make,&#10;      header: 'Status',&#10;      render: (make: Make) =&gt; (&#10;        &lt;span className={`px-2 py-1 rounded text-xs ${make.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}&gt;&#10;          {make.isActive ? 'Active' : 'Inactive'}&#10;        &lt;/span&gt;&#10;      )&#10;    },&#10;    { key: 'createdAt' as keyof Make, header: 'Created', render: (make: Make) =&gt; new Date(make.createdAt!).toLocaleDateString() }&#10;  ];&#10;&#10;  if (showForm) {&#10;    return (&#10;      &lt;MakeForm&#10;        make={editingMake}&#10;        onSave={async () =&gt; {&#10;          setShowForm(false);&#10;          await loadMakes();&#10;        }}&#10;        onCancel={() =&gt; setShowForm(false)}&#10;      /&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;GenericCrudList&#10;      items={makes}&#10;      columns={columns}&#10;      onEdit={handleEdit}&#10;      onDelete={handleDelete}&#10;      onAdd={handleAdd}&#10;      title=&quot;Vehicle Makes&quot;&#10;      loading={loading}&#10;    /&gt;&#10;  );&#10;}&#10;&#10;interface MakeFormProps {&#10;  make: Make | null;&#10;  onSave: () =&gt; void;&#10;  onCancel: () =&gt; void;&#10;}&#10;&#10;function MakeForm({ make, onSave, onCancel }: MakeFormProps) {&#10;  const [formData, setFormData] = useState({&#10;    name: make?.name || '',&#10;    description: make?.description || '',&#10;    isActive: make?.isActive ?? true&#10;  });&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    try {&#10;      if (make) {&#10;        await makesService.update(make.id!, formData);&#10;      } else {&#10;        await makesService.create(formData);&#10;      }&#10;      onSave();&#10;    } catch (error) {&#10;      console.error('Failed to save make:', error);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;p-6&quot;&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-6&quot;&gt;{make ? 'Edit Make' : 'Add New Make'}&lt;/h1&gt;&#10;      &lt;form onSubmit={handleSubmit} className=&quot;max-w-md&quot;&gt;&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;Name&lt;/label&gt;&#10;          &lt;input&#10;            type=&quot;text&quot;&#10;            value={formData.name}&#10;            onChange={(e) =&gt; setFormData({ ...formData, name: e.target.value })}&#10;            className=&quot;w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-blue-500 focus:border-blue-500&quot;&#10;            required&#10;          /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;Description&lt;/label&gt;&#10;          &lt;textarea&#10;            value={formData.description}&#10;            onChange={(e) =&gt; setFormData({ ...formData, description: e.target.value })}&#10;            className=&quot;w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-blue-500 focus:border-blue-500&quot;&#10;            rows={3}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;label className=&quot;flex items-center&quot;&gt;&#10;            &lt;input&#10;              type=&quot;checkbox&quot;&#10;              checked={formData.isActive}&#10;              onChange={(e) =&gt; setFormData({ ...formData, isActive: e.target.checked })}&#10;              className=&quot;mr-2&quot;&#10;            /&gt;&#10;            &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;Active&lt;/span&gt;&#10;          &lt;/label&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;          &lt;button&#10;            type=&quot;submit&quot;&#10;            className=&quot;px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700&quot;&#10;          &gt;&#10;            Save&#10;          &lt;/button&gt;&#10;          &lt;button&#10;            type=&quot;button&quot;&#10;            onClick={onCancel}&#10;            className=&quot;px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700&quot;&#10;          &gt;&#10;            Cancel&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/VehicleTypes.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/VehicleTypes.tsx" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { GenericCrudList } from '../components/generic/GenericCrudList';&#10;import { VehicleType, vehicleTypesService } from '../services/vehicleTypesService';&#10;&#10;export function VehicleTypes() {&#10;  const [vehicleTypes, setVehicleTypes] = useState&lt;VehicleType[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [editingType, setEditingType] = useState&lt;VehicleType | null&gt;(null);&#10;  const [showForm, setShowForm] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    loadVehicleTypes();&#10;  }, []);&#10;&#10;  const loadVehicleTypes = async () =&gt; {&#10;    try {&#10;      const data = await vehicleTypesService.getAll();&#10;      setVehicleTypes(data);&#10;    } catch (error) {&#10;      console.error('Failed to load vehicle types:', error);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleEdit = (vehicleType: VehicleType) =&gt; {&#10;    setEditingType(vehicleType);&#10;    setShowForm(true);&#10;  };&#10;&#10;  const handleDelete = async (id: string) =&gt; {&#10;    if (window.confirm('Are you sure you want to delete this vehicle type?')) {&#10;      try {&#10;        await vehicleTypesService.delete(id);&#10;        await loadVehicleTypes();&#10;      } catch (error) {&#10;        console.error('Failed to delete vehicle type:', error);&#10;      }&#10;    }&#10;  };&#10;&#10;  const handleAdd = () =&gt; {&#10;    setEditingType(null);&#10;    setShowForm(true);&#10;  };&#10;&#10;  const columns = [&#10;    { key: 'name' as keyof VehicleType, header: 'Name' },&#10;    { key: 'description' as keyof VehicleType, header: 'Description' },&#10;    {&#10;      key: 'category' as keyof VehicleType,&#10;      header: 'Category',&#10;      render: (type: VehicleType) =&gt; (&#10;        &lt;span className=&quot;px-2 py-1 bg-gray-100 text-gray-800 rounded text-xs capitalize&quot;&gt;&#10;          {type.category}&#10;        &lt;/span&gt;&#10;      )&#10;    },&#10;    {&#10;      key: 'isActive' as keyof VehicleType,&#10;      header: 'Status',&#10;      render: (type: VehicleType) =&gt; (&#10;        &lt;span className={`px-2 py-1 rounded text-xs ${type.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}&gt;&#10;          {type.isActive ? 'Active' : 'Inactive'}&#10;        &lt;/span&gt;&#10;      )&#10;    },&#10;    { key: 'createdAt' as keyof VehicleType, header: 'Created', render: (type: VehicleType) =&gt; new Date(type.createdAt!).toLocaleDateString() }&#10;  ];&#10;&#10;  if (showForm) {&#10;    return (&#10;      &lt;VehicleTypeForm&#10;        vehicleType={editingType}&#10;        onSave={async () =&gt; {&#10;          setShowForm(false);&#10;          await loadVehicleTypes();&#10;        }}&#10;        onCancel={() =&gt; setShowForm(false)}&#10;      /&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;GenericCrudList&#10;      items={vehicleTypes}&#10;      columns={columns}&#10;      onEdit={handleEdit}&#10;      onDelete={handleDelete}&#10;      onAdd={handleAdd}&#10;      title=&quot;Vehicle Types&quot;&#10;      loading={loading}&#10;    /&gt;&#10;  );&#10;}&#10;&#10;interface VehicleTypeFormProps {&#10;  vehicleType: VehicleType | null;&#10;  onSave: () =&gt; void;&#10;  onCancel: () =&gt; void;&#10;}&#10;&#10;function VehicleTypeForm({ vehicleType, onSave, onCancel }: VehicleTypeFormProps) {&#10;  const [formData, setFormData] = useState({&#10;    name: vehicleType?.name || '',&#10;    description: vehicleType?.description || '',&#10;    category: vehicleType?.category || 'car' as const,&#10;    isActive: vehicleType?.isActive ?? true&#10;  });&#10;&#10;  const categories = ['car', 'motorcycle', 'truck', 'suv', 'van'] as const;&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    try {&#10;      if (vehicleType) {&#10;        await vehicleTypesService.update(vehicleType.id!, formData);&#10;      } else {&#10;        await vehicleTypesService.create(formData);&#10;      }&#10;      onSave();&#10;    } catch (error) {&#10;      console.error('Failed to save vehicle type:', error);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;p-6&quot;&gt;&#10;      &lt;h1 className=&quot;text-2xl font-bold mb-6&quot;&gt;{vehicleType ? 'Edit Vehicle Type' : 'Add New Vehicle Type'}&lt;/h1&gt;&#10;      &lt;form onSubmit={handleSubmit} className=&quot;max-w-md&quot;&gt;&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;Name&lt;/label&gt;&#10;          &lt;input&#10;            type=&quot;text&quot;&#10;            value={formData.name}&#10;            onChange={(e) =&gt; setFormData({ ...formData, name: e.target.value })}&#10;            className=&quot;w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-blue-500 focus:border-blue-500&quot;&#10;            required&#10;          /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;Description&lt;/label&gt;&#10;          &lt;textarea&#10;            value={formData.description}&#10;            onChange={(e) =&gt; setFormData({ ...formData, description: e.target.value })}&#10;            className=&quot;w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-blue-500 focus:border-blue-500&quot;&#10;            rows={3}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;Category&lt;/label&gt;&#10;          &lt;select&#10;            value={formData.category}&#10;            onChange={(e) =&gt; setFormData({ ...formData, category: e.target.value as any })}&#10;            className=&quot;w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-blue-500 focus:border-blue-500&quot;&#10;            required&#10;          &gt;&#10;            {categories.map((category) =&gt; (&#10;              &lt;option key={category} value={category}&gt;&#10;                {category.charAt(0).toUpperCase() + category.slice(1)}&#10;              &lt;/option&gt;&#10;            ))}&#10;          &lt;/select&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;mb-4&quot;&gt;&#10;          &lt;label className=&quot;flex items-center&quot;&gt;&#10;            &lt;input&#10;              type=&quot;checkbox&quot;&#10;              checked={formData.isActive}&#10;              onChange={(e) =&gt; setFormData({ ...formData, isActive: e.target.checked })}&#10;              className=&quot;mr-2&quot;&#10;            /&gt;&#10;            &lt;span className=&quot;text-sm font-medium text-gray-700&quot;&gt;Active&lt;/span&gt;&#10;          &lt;/label&gt;&#10;        &lt;/div&gt;&#10;        &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;          &lt;button&#10;            type=&quot;submit&quot;&#10;            className=&quot;px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700&quot;&#10;          &gt;&#10;            Save&#10;          &lt;/button&gt;&#10;          &lt;button&#10;            type=&quot;button&quot;&#10;            onClick={onCancel}&#10;            className=&quot;px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700&quot;&#10;          &gt;&#10;            Cancel&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/genericCrudService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/genericCrudService.ts" />
              <option name="updatedContent" value="export interface CrudEntity {&#10;  id?: string;&#10;  createdAt?: string;&#10;  updatedAt?: string;&#10;}&#10;&#10;export class GenericCrudService&lt;T extends CrudEntity&gt; {&#10;  protected baseUrl: string;&#10;&#10;  constructor(endpoint: string) {&#10;    this.baseUrl = `${process.env.REACT_APP_API_URL || 'http://localhost:3001/api'}/${endpoint}`;&#10;  }&#10;&#10;  async getAll(): Promise&lt;T[]&gt; {&#10;    const response = await fetch(this.baseUrl);&#10;    if (!response.ok) throw new Error('Failed to fetch items');&#10;    return response.json();&#10;  }&#10;&#10;  async getById(id: string): Promise&lt;T&gt; {&#10;    const response = await fetch(`${this.baseUrl}/${id}`);&#10;    if (!response.ok) throw new Error('Failed to fetch item');&#10;    return response.json();&#10;  }&#10;&#10;  async create(item: Omit&lt;T, 'id' | 'createdAt' | 'updatedAt'&gt;): Promise&lt;T&gt; {&#10;    const response = await fetch(this.baseUrl, {&#10;      method: 'POST',&#10;      headers: {&#10;        'Content-Type': 'application/json',&#10;      },&#10;      body: JSON.stringify(item),&#10;    });&#10;    if (!response.ok) throw new Error('Failed to create item');&#10;    return response.json();&#10;  }&#10;&#10;  async update(id: string, item: Partial&lt;T&gt;): Promise&lt;T&gt; {&#10;    const response = await fetch(`${this.baseUrl}/${id}`, {&#10;      method: 'PUT',&#10;      headers: {&#10;        'Content-Type': 'application/json',&#10;      },&#10;      body: JSON.stringify(item),&#10;    });&#10;    if (!response.ok) throw new Error('Failed to update item');&#10;    return response.json();&#10;  }&#10;&#10;  async delete(id: string): Promise&lt;void&gt; {&#10;    const response = await fetch(`${this.baseUrl}/${id}`, {&#10;      method: 'DELETE',&#10;    });&#10;    if (!response.ok) throw new Error('Failed to delete item');&#10;  }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/makesService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/makesService.ts" />
              <option name="updatedContent" value="import { GenericCrudService, CrudEntity } from './genericCrudService';&#10;&#10;export interface Make extends CrudEntity {&#10;  name: string;&#10;  description?: string;&#10;  isActive: boolean;&#10;}&#10;&#10;export class MakesService extends GenericCrudService&lt;Make&gt; {&#10;  constructor() {&#10;    super('makes');&#10;  }&#10;&#10;  async getActiveMakes(): Promise&lt;Make[]&gt; {&#10;    const response = await fetch(`${this.baseUrl}?active=true`);&#10;    if (!response.ok) throw new Error('Failed to fetch active makes');&#10;    return response.json();&#10;  }&#10;}&#10;&#10;export const makesService = new MakesService();&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/services/vehicleTypesService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/vehicleTypesService.ts" />
              <option name="updatedContent" value="import { GenericCrudService, CrudEntity } from './genericCrudService';&#10;&#10;export interface VehicleType extends CrudEntity {&#10;  name: string;&#10;  description?: string;&#10;  category: 'car' | 'motorcycle' | 'truck' | 'suv' | 'van';&#10;  isActive: boolean;&#10;}&#10;&#10;export class VehicleTypesService extends GenericCrudService&lt;VehicleType&gt; {&#10;  constructor() {&#10;    super('vehicle-types');&#10;  }&#10;&#10;  async getByCategory(category: string): Promise&lt;VehicleType[]&gt; {&#10;    const response = await fetch(`${this.baseUrl}?category=${category}`);&#10;    if (!response.ok) throw new Error('Failed to fetch vehicle types by category');&#10;    return response.json();&#10;  }&#10;}&#10;&#10;export const vehicleTypesService = new VehicleTypesService();&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>